#include <iostream>
#include <string>
#include <cstring>

 using namespace std ; 

template <class Type>

class SLLNode
{
  
 public :

    Type info ;
    SLLNode *next ;

   SLLNode()
    {
    	info = 0 ;

    	next = NULL ;
    }


   SLLNode(Type element)
    {
    	info = element ;

    	next = 0 ;
    } 

} ;

template <class Type1>

class SLList
 {
    SLLNode <Type1> *head ;
    SLLNode <Type1> *tail ;

    public :

     SLList()
      {
      	head = NULL ;
      	tail = NULL ;
      }


     void add_at_head(Type1 element)
       {

       	 SLLNode <Type1> *N = new SLLNode <Type1>(element) ;

          if (head == NULL)
          {
          	  head = N ;
          	  tail = N ;
          }

          else 

          {
             N->next = head ;

             head = N ;
          }


       }
       
        void delete_from_head()
         {
         	if (head == NULL)
         		
         		return ;

         	else

            if (head == tail)

            	{ 
                    delete head ;

                    head = NULL ;

                    tail = NULL ;
                 
            	}

            else

            	{ 
                   SLLNode <Type1> *temp = head ;

                   head = head->next ;

                   delete temp ;
                  
            	}

         }

       Type1 head_el()
        {
           return head->info ;
        }

       bool is_head_null()
        { 
           if (head == NULL)

              return true ;

           else

              return false ;
        }
     
 } ;

 template <typename Type2>

 class Stack
 {
   SLList <Type2>L1 ;

     public :

// No need of constructor
    // Stack()
    //  {
    //    L1 = new SLList<Type1>() ;
    //  }

    void push(Type2 element)
     {
        L1.add_at_head(element) ;
     }

    void pop()
     {
        L1.delete_from_head() ;
     }

    Type2 top_el()
     {
        return L1.head_el() ;
     }

    bool isempty()
     {
        return L1.is_head_null() ;
     }

 } ;

 bool validation(string str)
  {
     char c ;
     int i = 0 ;

      while(str[i] != '\0')
        {
           c = str[i] ;

           if (!isdigit(c))

              return false ;

            i++ ;
        }

     return true ;
  }

 template <typename T>

 void add(Stack <T> &S1,Stack <T> &S2,Stack <T> &S3)
  {
     int carry = 0, sum = 0 ;

       while(!(S1.isempty() && S2.isempty()))
       {          

         if (S1.isempty() && !S2.isempty())

            sum = S2.top_el() + carry ;

         else if (S2.isempty() && !S1.isempty())

            sum = S1.top_el() + carry ;

         else

            sum = S1.top_el() + S2.top_el() + carry ;

           carry = sum/10 ;

           sum = sum % 10 ;

            S3.push(sum) ;

            S1.pop() ;

            S2.pop() ;

       }

       S3.push(carry) ;


      
  }


int main(int argc, char const *argv[])
{
  Stack <int> S1,S2,S3 ;

  string str1, str2 ;

  int i = 0 ;

  cout << "\n\n Program to add two large nos." ;

  cout << "\n\n Enter First no.  : " ;
  cin >> str1 ;

  while(!validation(str1))
   {
      cout << "\n Please enter valid input : " ;

      cin >> str1 ;
   }


  while(str1[i] != '\0')
   {
      S1.push((int)str1[i] - 48) ;

      i++ ;
   }

  cout << "\n\n Enter Second no. : " ;
  cin >> str2 ;

  while(!validation(str2))
   {
      cout << "\n Please enter valid input : " ;

      cin >> str2 ;
   }

   i = 0 ;

  while(str2[i] != '\0')
   {
      S2.push((int)str2[i] - 48) ;

      i++ ;
   }


   add(S1,S2,S3) ;

  cout << "\n\n Summation is     : " ;

  while(!S3.isempty())
  {
     cout << S3.top_el() ;

     S3.pop() ;
  }


  return 0;
}
